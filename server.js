 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
// var url = require('url');

app.use(require('stylus').middleware(__dirname + '/public'));

app.set('view engine', 'pug');
app.set('views', __dirname + '/views');

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

// Make an array of the current month names as of 07/12/2017 @ 3:36 PM
let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

// This handy little function uses a ternary operator to 
// add on an aesthetic zero if the input digit is less than 10
function zeroFill (i) {
    return (i < 10 ? '0' : '') + i;
}

// Takes a UNIX or date then routes the newly acquired Date back through a return
function unixit(UNIX, unixsupplied) {
  if (unixsupplied)
    return new Date(UNIX*1000);
  else
    return new Date(UNIX[0], UNIX[1], UNIX[2]);
}

// Send a JSON object containing the UNIX and converted Date
function sortDate() {
  var unix = ''+arguments[0];
  var date = unixit(arguments[0], true);
  var natural = `${months[date.getMonth()]} ${zeroFill(date.getDate())}, ${date.getFullYear()}`;
  return {unix, natural};
}

// Rip up any Valid Date string sent to the stampit route
function ripIt() {
  var numberPattern = /\d+/g;
  var numDates = (arguments[0]).match( numberPattern );
  var month = 6, date = 2, year = 2017;
  month = months.indexOf(arguments[1]);
  
  numDates = (''+numDates.join(''));
  var len = numDates.length;
  year = numDates.slice(len-4, len);
  date = numDates.slice(0, numDates.indexOf(year));
  
  return sortDate(unixit([year, month, date]).getTime()/1000);
}

app.get('/', function(req, res) {
  res.render('index', {title: (req.protocol + 's://' + req.get('host') + req.originalUrl)});
});

// This is the back bone for the time stamp service
// The stampit route takes the parameter given to the
// url and converts it to UNIX and natural date to be displayed as a json
app.get('/:stampit', function(req, res) {
  // Validate if the incoming stampit is in the valid format with REGEX
  var strDates = (''+(req.params.stampit).match( /\D+/g )).replace(/\s+/g, '').replace(/\,/g, '');
  
  if(months.indexOf(strDates) + 1) {  
    var unix;
  
    if(!isNaN(req.params.stampit))
      unix = sortDate(req.params.stampit,true);
    else {
      unix = ripIt(req.params.stampit, strDates);
    }
    
    res.send(JSON.stringify(unix));
    
  } else {
    // If the stampit is not in a valid format then they will be rerouted to the below
    // res.send('Please use correctly formated date');
    res.render('pleaseusethis', { stampit: req.params.stampit, title: (req.protocol + 's://' + req.get('host') + req.originalUrl) });
  }
});

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

